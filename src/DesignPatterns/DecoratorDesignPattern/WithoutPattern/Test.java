package DesignPatterns.DecoratorDesignPattern.WithoutPattern;

public class Test {


    public static void main(String[] args) {
        BaseCoffee coffee = new CoffeeWithMilk();
        System.out.println(coffee.getDescription()+"\nPrice :- ‚Çπ "+coffee.getCost());

        coffee = new CoffeeWithSugarAndMilk();
        System.out.println(coffee.getDescription()+"\nPrice :- ‚Çπ "+coffee.getCost());

        coffee = new CoffeeWithSugar();
        System.out.println(coffee.getDescription()+"\nPrice :- ‚Çπ "+coffee.getCost());
    }

    /*
    üîπ Problems Without the Decorator Pattern
            1Ô∏è‚É£ Class Explosion ‚Üí Each new coffee variation requires a new class (e.g., CoffeeWithMilkAndSugar).
            2Ô∏è‚É£ Less Flexibility ‚Üí Cannot dynamically modify coffee types at runtime.
            3Ô∏è‚É£ Violates Open-Closed Principle ‚Üí Adding a new feature requires modifying multiple classes.
     */
}
